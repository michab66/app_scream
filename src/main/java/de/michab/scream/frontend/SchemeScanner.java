/*
 * Scream @ https://github.com/urschleim/scream
 *
 * Copyright Â© 1998-2022 Michael G. Binz
 */
package de.michab.scream.frontend;

import java.io.IOException;
import java.io.Reader;

import de.michab.scream.Raise;
import de.michab.scream.RuntimeX;
import de.michab.scream.frontend.Token.Tk;
import de.michab.scream.util.SourcePosition;

/**
 * The scanner implementation.  Works as one would expect.  Text from the input
 * is broken into tokens.  Delegates its responsibilities to some automatically
 * generated scanner.
 */
public class SchemeScanner
{
    /**
     * This is the real scanner generated by JFlex.
     */
    private SchemeScanner7 _scanner;

    /**
     * Create a new scanner on the passed <code>Reader</code>.
     */
    public SchemeScanner( Reader source, String filename )
    {
        _scanner = new SchemeScanner7( source, filename );
    }

    /**
     * Get the next token from the input stream.
     */
    public Token getNextToken()
            throws RuntimeX
    {
        // No scanner means that we reached the end of input.
        if ( _scanner == null )
            return new Token( Tk.Eof, new SourcePosition( -1, -1, "SchemeScanner.getNextToken()" ) );

        try
        {
            Token token = _scanner.getNextToken();

            if ( token.getType() == Tk.Eof )
            {
                // If we reached EOF, we throw away the scanner...
                _scanner = null;
                // ...before doing business as usual.
            }

            return token;
        }
        catch ( IOException e )
        {
            throw Raise.mIoError( e );
        }
    }
}
